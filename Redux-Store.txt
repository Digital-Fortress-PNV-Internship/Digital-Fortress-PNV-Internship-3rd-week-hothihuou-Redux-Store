Link tham kh·∫£o ok:https://www.youtube.com/watch?v=bZwMFYKeSGY&list=PLJ5qtRQovuEOoKffoCBzTfvzMTTORnoyp&index=31
Link web:https://redux.js.org/tutorials/essentials/part-1-overview-concepts



					REDUX STORE
Link tham khao: https://www.youtube.com/watch?v=Sq_Qt8PWf_Y
https://topdev.vn/blog/redux-la-gi/

- Redux l√† g√¨? Ki·∫øn tr√∫c c·ªßa n√≥ ra sao?
-Khi n√†o c·∫ßn s·ª≠ d·ª•ng Redux?
- Redux c√≥ ph·∫£i ch·ªâ ƒë·ªÉ d√πng v·ªõi ReactJS hay kh√¥ng?
- Code m·∫´u m·ªôt v√≠ d·ª• ƒë∆°n gi·∫£n s·ª≠ d·ª•ng redux
- L∆∞u √Ω


1. Redux l√† g√¨? Ki·∫øn tr√∫c c·ªßa n√≥ ra sao?

- Redux is a predictable state container for JavaScript apps.
- Th∆∞ vi·ªán js qu·∫£n l√Ω state, m√† state n√†y c√≥ th·ªÉ d·ª± ƒëo√°n ƒë∆∞·ª£c. 
- S·ª≠ d·ª•ng ki·∫øn tr√∫c uni-directional data flow.

* Ki·∫øn tr√∫c

S∆° ƒë·ªì l√†m vi·ªác


Store g·ªìm c√≥:
State: l√† d·ªØ li·ªáu hi·ªán t·∫°i ƒë∆∞·ª£c l∆∞u tr√™n state.  Reducer: l√† h√†m bi·∫øn ƒë·ªïi state c≈© sang state m·ªõi.
Dispatcher: qu·∫£n l√Ω middlewares v√† chuy·ªÉn d·ªØ li·ªáu xu·ªëng reducer.
Action = plain javascript object m√¥ t·∫£ h√†nh ƒë·ªông.

2. Khi n√†o c·∫ßn s·ª≠ d·ª•ng Redux?
- D·ªØ li·ªáu ƒë∆∞·ª£c s·ª≠ d·ª•ng ·ªü nhi√™ÃÄu n∆°i
- C√≥ h·ªó tr·ª£ ch·ª©c nƒÉng undo/redo
- C·∫ßn cache d·ªØ li·ªáu ƒë·ªÉ t√°i s·ª≠ d·ª•ng cho nh·ªØng l·∫ßn sau.

L∆∞u √Ω: N·∫øu app ƒëang ch·∫°y t·ªët m√† kh√¥ng c√≥ Redux, v·∫≠y c√≥ th·ªÉ app ƒë√≥ kh√¥ng c·∫ßn t·ªõi Redux.


3. Redux c√≥ ph·∫£i ch·ªâ ƒë·ªÉ d√πng v·ªõi ReactJS hay kh√¥ng?
Kh√¥ng nh√© b·∫°n. N√≥ ƒë∆∞·ª£c s·ª≠ d·ª•ng cho c√°c javascript apps.  V·∫≠y c√≥ th·ªÉ l√†:
ReactJS  Angular  VueJS
Pure javascript App  Other javascript app



4. Demo

import { createStore } from 'redux'

// Step 1: Define a reducer
// A pure js function
// that transform the old state to the new one
// based on the action.type
function counter(state = 0, action) {  switch (action.type) {
case 'INCREMENT':
return state + 1  case 'DECREMENT':
return state - 1  default:
return state
}
}

// Step 2: Init your store with the reducer
// Its API is { subscribe, dispatch, getState }.  let store = createStore(counter)

// Step 3: Subscribe to state changes to update UI  store.subscribe(() => console.log(store.getState()))

// Step 4: Dispatch action to update redux state
// The only way to mutate the internal state is to dispatch an action.  store.dispatch({ type: 'INCREMENT' }) // 1
store.dispatch({ type: 'INCREMENT' }) // 2  store.dispatch({ type: 'DECREMENT' }) // 1


üìù Nh·ªõ n√®:
Redux s·ª≠ d·ª•ng ki·∫øn tr√∫c 1 chi·ªÅu: uni-directional data flow  Redux ch·ªâ d√πng 1 store duy nh·∫•t l√†m Single Source of Truth
Redux state l√† READ-ONLY. Mu·ªën update ph·∫£i dispatch m·ªôt action (js object)  Nh·ªØng thay ƒë·ªïi c·ªßa redux state ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi Pure functions (reducer)  Redux c√≥ th·ªÉ d√πng cho c√°c javascript apps, kh√¥ng ch·ªâ ri√™ng g√¨ ReactJS.
